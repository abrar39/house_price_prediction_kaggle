{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "334109ab",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:20.323299Z",
     "iopub.status.busy": "2024-06-01T15:26:20.322699Z",
     "iopub.status.idle": "2024-06-01T15:26:23.470402Z",
     "shell.execute_reply": "2024-06-01T15:26:23.468690Z"
    },
    "papermill": {
     "duration": 3.162272,
     "end_time": "2024-06-01T15:26:23.473484",
     "exception": false,
     "start_time": "2024-06-01T15:26:20.311212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from pandas.api.types import is_numeric_dtype, is_object_dtype\n",
    "\n",
    "# Import Sklearn methods\n",
    "from sklearn.ensemble import HistGradientBoostingRegressor as HGBR\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "624c67bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.492697Z",
     "iopub.status.busy": "2024-06-01T15:26:23.491961Z",
     "iopub.status.idle": "2024-06-01T15:26:23.509542Z",
     "shell.execute_reply": "2024-06-01T15:26:23.508364Z"
    },
    "papermill": {
     "duration": 0.030615,
     "end_time": "2024-06-01T15:26:23.512406",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.481791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeatureSelection:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "        \n",
    "    def delete_null_features(dataframe, threshold: float=0.5):\n",
    "        \"\"\"\n",
    "        Delete features with excessive null values.\n",
    "        \n",
    "        Arguments:\n",
    "        threshold (Float): number specifying the percentage of nulls in a column.\n",
    "            If percentage of nulls > threshold then drop the feature.\n",
    "        \"\"\"\n",
    "        columns = dataframe.columns\n",
    "        \n",
    "        for column in columns:\n",
    "            # if percentage of nulls > threshold then drop the feature\n",
    "            null_ratio = dataframe[column].isna().sum() / len(dataframe[column])\n",
    "            if null_ratio > threshold:\n",
    "                dataframe = dataframe.drop(column, axis=1)\n",
    "        \n",
    "        return dataframe\n",
    "    \n",
    "    \n",
    "    def handle_missing_values(dataframe):\n",
    "        \"\"\"\n",
    "        Handle the missing values in the dataframe features. \n",
    "        If the feature contains continuous data fill with mean values.\n",
    "        If the feature contains categorical data fill with mode values.\n",
    "        \"\"\"\n",
    "        \n",
    "        # Check if a column contains null values\n",
    "        for column in dataframe.columns:\n",
    "            # Check if the column is continuous or categorical\n",
    "            if is_numeric_dtype(dataframe[column]):\n",
    "                # fill the null values\n",
    "                dataframe[column] = dataframe[column].fillna(dataframe[column].mean())\n",
    "            else:\n",
    "                # fill the null values\n",
    "                dataframe[column] = dataframe[column].fillna(dataframe[column].mode()[0])\n",
    "        \n",
    "        return dataframe\n",
    "    \n",
    "    def encode_categorical_features(dataframe):\n",
    "        \"\"\"\n",
    "        Perform OHE (One Hot Encoding) on the categorical variables\n",
    "        \"\"\"\n",
    "        for column in dataframe.columns:\n",
    "            # Check datatype of the column\n",
    "            if is_object_dtype(dataframe[column]):\n",
    "                # if column is of type object perform OHE\n",
    "                dataframe = pd.concat([dataframe, pd.get_dummies(dataframe[column], prefix=column)], axis=1)\n",
    "                # drop the original column\n",
    "                dataframe = dataframe.drop([column], axis=1)\n",
    "                \n",
    "        return dataframe\n",
    "    \n",
    "    def normalize_continuous_features(dataframe, exclude_columns:bool = True):\n",
    "        \"\"\"\n",
    "        Normalize the values of continuous features between 0 and 1.\n",
    "        \"\"\"\n",
    "        \n",
    "        # Select the numeric type columns\n",
    "        numeric_columns = dataframe.select_dtypes(include=['number']).columns\n",
    "        columns_to_scale = numeric_columns\n",
    "        if exclude_columns:\n",
    "            # Exclude the ID column and the Sale Price Column\n",
    "            excluded_columns = ['Id', 'SalePrice']\n",
    "            columns_to_scale = numeric_columns.drop(excluded_columns)\n",
    "        # Apply Min Max Scaling\n",
    "        scaler = MinMaxScaler()\n",
    "        dataframe[columns_to_scale] = scaler.fit_transform(dataframe[columns_to_scale])\n",
    "                \n",
    "        return dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc72ff6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.530971Z",
     "iopub.status.busy": "2024-06-01T15:26:23.530445Z",
     "iopub.status.idle": "2024-06-01T15:26:23.650113Z",
     "shell.execute_reply": "2024-06-01T15:26:23.648628Z"
    },
    "papermill": {
     "duration": 0.13244,
     "end_time": "2024-06-01T15:26:23.653169",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.520729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Data Shape : (1460, 81)\n",
      "Test Data Shape : (1459, 80)\n"
     ]
    }
   ],
   "source": [
    "train_data_path = '/kaggle/input/house-prices-advanced-regression-techniques/train.csv'\n",
    "test_data_path = '/kaggle/input/house-prices-advanced-regression-techniques/test.csv'\n",
    "\n",
    "train_df = pd.read_csv(train_data_path)\n",
    "test_df = pd.read_csv(test_data_path)\n",
    "\n",
    "print(f'Training Data Shape : {train_df.shape}')\n",
    "print(f'Test Data Shape : {test_df.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "856269b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.672542Z",
     "iopub.status.busy": "2024-06-01T15:26:23.672003Z",
     "iopub.status.idle": "2024-06-01T15:26:23.776542Z",
     "shell.execute_reply": "2024-06-01T15:26:23.775210Z"
    },
    "papermill": {
     "duration": 0.118048,
     "end_time": "2024-06-01T15:26:23.779746",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.661698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Apply the transformations e.g. imputation, deletion etc. on training dataset\n",
    "non_null_df = FeatureSelection.delete_null_features(train_df)\n",
    "imputated_df = FeatureSelection.handle_missing_values(non_null_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "51823c68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.798856Z",
     "iopub.status.busy": "2024-06-01T15:26:23.798363Z",
     "iopub.status.idle": "2024-06-01T15:26:23.805137Z",
     "shell.execute_reply": "2024-06-01T15:26:23.803753Z"
    },
    "papermill": {
     "duration": 0.020496,
     "end_time": "2024-06-01T15:26:23.808675",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.788179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imputed Data Shape : (1460, 76)\n"
     ]
    }
   ],
   "source": [
    "print(f'Imputed Data Shape : {imputated_df.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1db110b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.828958Z",
     "iopub.status.busy": "2024-06-01T15:26:23.828447Z",
     "iopub.status.idle": "2024-06-01T15:26:23.854598Z",
     "shell.execute_reply": "2024-06-01T15:26:23.853045Z"
    },
    "papermill": {
     "duration": 0.04016,
     "end_time": "2024-06-01T15:26:23.857613",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.817453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Joined Data Shape : (2919, 75)\n"
     ]
    }
   ],
   "source": [
    "# Now we need to perform OHE, this is required to be performed on both the training and test data.\n",
    "# Join the datasets\n",
    "\n",
    "# Identify common columns\n",
    "common_columns = imputated_df.columns.intersection(test_df.columns)\n",
    "\n",
    "# Select only the common columns from both DataFrames\n",
    "first_df_common = imputated_df[common_columns]\n",
    "second_df_common = test_df[common_columns]\n",
    "\n",
    "\n",
    "joined_df = pd.concat([first_df_common, second_df_common], ignore_index=True)\n",
    "print(f'Joined Data Shape : {joined_df.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "80b4b12f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.878016Z",
     "iopub.status.busy": "2024-06-01T15:26:23.876893Z",
     "iopub.status.idle": "2024-06-01T15:26:23.913841Z",
     "shell.execute_reply": "2024-06-01T15:26:23.912293Z"
    },
    "papermill": {
     "duration": 0.0507,
     "end_time": "2024-06-01T15:26:23.917186",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.866486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>...</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>...</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>...</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>...</td>\n",
       "      <td>35</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>...</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 75 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street LotShape LandContour  \\\n",
       "0   1          60       RL         65.0     8450   Pave      Reg         Lvl   \n",
       "1   2          20       RL         80.0     9600   Pave      Reg         Lvl   \n",
       "2   3          60       RL         68.0    11250   Pave      IR1         Lvl   \n",
       "3   4          70       RL         60.0     9550   Pave      IR1         Lvl   \n",
       "4   5          60       RL         84.0    14260   Pave      IR1         Lvl   \n",
       "\n",
       "  Utilities LotConfig  ... OpenPorchSF EnclosedPorch 3SsnPorch ScreenPorch  \\\n",
       "0    AllPub    Inside  ...          61             0         0           0   \n",
       "1    AllPub       FR2  ...           0             0         0           0   \n",
       "2    AllPub    Inside  ...          42             0         0           0   \n",
       "3    AllPub    Corner  ...          35           272         0           0   \n",
       "4    AllPub       FR2  ...          84             0         0           0   \n",
       "\n",
       "  PoolArea MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n",
       "0        0       0       2    2008        WD         Normal  \n",
       "1        0       0       5    2007        WD         Normal  \n",
       "2        0       0       9    2008        WD         Normal  \n",
       "3        0       0       2    2006        WD        Abnorml  \n",
       "4        0       0      12    2008        WD         Normal  \n",
       "\n",
       "[5 rows x 75 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "joined_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ad589659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:23.938908Z",
     "iopub.status.busy": "2024-06-01T15:26:23.938437Z",
     "iopub.status.idle": "2024-06-01T15:26:24.167546Z",
     "shell.execute_reply": "2024-06-01T15:26:24.166199Z"
    },
    "papermill": {
     "duration": 0.244381,
     "end_time": "2024-06-01T15:26:24.170713",
     "exception": false,
     "start_time": "2024-06-01T15:26:23.926332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encoded Data Shape : (2919, 272)\n"
     ]
    }
   ],
   "source": [
    "# Encode the categorical featuers\n",
    "encoded_df = FeatureSelection.encode_categorical_features(joined_df)\n",
    "print(f'Encoded Data Shape : {encoded_df.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "86cd7b4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:24.191110Z",
     "iopub.status.busy": "2024-06-01T15:26:24.190634Z",
     "iopub.status.idle": "2024-06-01T15:26:24.200445Z",
     "shell.execute_reply": "2024-06-01T15:26:24.198814Z"
    },
    "papermill": {
     "duration": 0.023279,
     "end_time": "2024-06-01T15:26:24.203190",
     "exception": false,
     "start_time": "2024-06-01T15:26:24.179911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encoded Data Shape : (2919, 271)\n"
     ]
    }
   ],
   "source": [
    "# drop the Id column before applying scaling\n",
    "encoded_df = encoded_df.drop('Id', axis=1)\n",
    "print(f'Encoded Data Shape : {encoded_df.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "58b363c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:24.223916Z",
     "iopub.status.busy": "2024-06-01T15:26:24.223408Z",
     "iopub.status.idle": "2024-06-01T15:26:24.269477Z",
     "shell.execute_reply": "2024-06-01T15:26:24.267964Z"
    },
    "papermill": {
     "duration": 0.059704,
     "end_time": "2024-06-01T15:26:24.272276",
     "exception": false,
     "start_time": "2024-06-01T15:26:24.212572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>...</th>\n",
       "      <th>SaleType_ConLw</th>\n",
       "      <th>SaleType_New</th>\n",
       "      <th>SaleType_Oth</th>\n",
       "      <th>SaleType_WD</th>\n",
       "      <th>SaleCondition_Abnorml</th>\n",
       "      <th>SaleCondition_AdjLand</th>\n",
       "      <th>SaleCondition_Alloca</th>\n",
       "      <th>SaleCondition_Family</th>\n",
       "      <th>SaleCondition_Normal</th>\n",
       "      <th>SaleCondition_Partial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.150685</td>\n",
       "      <td>0.033420</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.949275</td>\n",
       "      <td>0.883333</td>\n",
       "      <td>0.12250</td>\n",
       "      <td>0.125089</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.202055</td>\n",
       "      <td>0.038795</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.753623</td>\n",
       "      <td>0.433333</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.173281</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.160959</td>\n",
       "      <td>0.046507</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.934783</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.10125</td>\n",
       "      <td>0.086109</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.294118</td>\n",
       "      <td>0.133562</td>\n",
       "      <td>0.038561</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.311594</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.038271</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.215753</td>\n",
       "      <td>0.060576</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.927536</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.21875</td>\n",
       "      <td>0.116052</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 271 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass  LotFrontage   LotArea  OverallQual  OverallCond  YearBuilt  \\\n",
       "0    0.235294     0.150685  0.033420     0.666667        0.500   0.949275   \n",
       "1    0.000000     0.202055  0.038795     0.555556        0.875   0.753623   \n",
       "2    0.235294     0.160959  0.046507     0.666667        0.500   0.934783   \n",
       "3    0.294118     0.133562  0.038561     0.666667        0.500   0.311594   \n",
       "4    0.235294     0.215753  0.060576     0.777778        0.500   0.927536   \n",
       "\n",
       "   YearRemodAdd  MasVnrArea  BsmtFinSF1  BsmtFinSF2  ...  SaleType_ConLw  \\\n",
       "0      0.883333     0.12250    0.125089         0.0  ...           False   \n",
       "1      0.433333     0.00000    0.173281         0.0  ...           False   \n",
       "2      0.866667     0.10125    0.086109         0.0  ...           False   \n",
       "3      0.333333     0.00000    0.038271         0.0  ...           False   \n",
       "4      0.833333     0.21875    0.116052         0.0  ...           False   \n",
       "\n",
       "   SaleType_New  SaleType_Oth  SaleType_WD  SaleCondition_Abnorml  \\\n",
       "0         False         False         True                  False   \n",
       "1         False         False         True                  False   \n",
       "2         False         False         True                  False   \n",
       "3         False         False         True                   True   \n",
       "4         False         False         True                  False   \n",
       "\n",
       "   SaleCondition_AdjLand  SaleCondition_Alloca  SaleCondition_Family  \\\n",
       "0                  False                 False                 False   \n",
       "1                  False                 False                 False   \n",
       "2                  False                 False                 False   \n",
       "3                  False                 False                 False   \n",
       "4                  False                 False                 False   \n",
       "\n",
       "   SaleCondition_Normal  SaleCondition_Partial  \n",
       "0                  True                  False  \n",
       "1                  True                  False  \n",
       "2                  True                  False  \n",
       "3                 False                  False  \n",
       "4                  True                  False  \n",
       "\n",
       "[5 rows x 271 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply min-max scaling to the continuous featuers\n",
    "scaled_df = FeatureSelection.normalize_continuous_features(encoded_df, exclude_columns=False)\n",
    "scaled_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87259868",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:24.294944Z",
     "iopub.status.busy": "2024-06-01T15:26:24.294339Z",
     "iopub.status.idle": "2024-06-01T15:26:24.303797Z",
     "shell.execute_reply": "2024-06-01T15:26:24.302215Z"
    },
    "papermill": {
     "duration": 0.024299,
     "end_time": "2024-06-01T15:26:24.306853",
     "exception": false,
     "start_time": "2024-06-01T15:26:24.282554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled Training Data Shape : (1460, 271)\n",
      "Scaled Test Data Shape : (1459, 271)\n"
     ]
    }
   ],
   "source": [
    "# Now again let's separate the train and test datasets\n",
    "scaled_train_df = scaled_df.iloc[:1460]\n",
    "scaled_test_df = scaled_df.iloc[1460:]\n",
    "\n",
    "print(f'Scaled Training Data Shape : {scaled_train_df.shape}')\n",
    "print(f'Scaled Test Data Shape : {scaled_test_df.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4748c4c2",
   "metadata": {
    "papermill": {
     "duration": 0.009335,
     "end_time": "2024-06-01T15:26:24.326236",
     "exception": false,
     "start_time": "2024-06-01T15:26:24.316901",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94790095",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:24.348529Z",
     "iopub.status.busy": "2024-06-01T15:26:24.347995Z",
     "iopub.status.idle": "2024-06-01T15:26:26.622405Z",
     "shell.execute_reply": "2024-06-01T15:26:26.621150Z"
    },
    "papermill": {
     "duration": 2.290353,
     "end_time": "2024-06-01T15:26:26.626539",
     "exception": false,
     "start_time": "2024-06-01T15:26:24.336186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>HistGradientBoostingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">HistGradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>HistGradientBoostingRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "HistGradientBoostingRegressor()"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create an instance of HistGradientBoostRegressor\n",
    "hgbr = HGBR()\n",
    "# Fit the data\n",
    "hgbr.fit(scaled_train_df, train_df['SalePrice'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "36133a1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.650526Z",
     "iopub.status.busy": "2024-06-01T15:26:26.649985Z",
     "iopub.status.idle": "2024-06-01T15:26:26.686799Z",
     "shell.execute_reply": "2024-06-01T15:26:26.685564Z"
    },
    "papermill": {
     "duration": 0.05248,
     "end_time": "2024-06-01T15:26:26.690622",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.638142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9809984572671808"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hgbr.score(scaled_train_df, train_df['SalePrice'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e0a8cf45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.714575Z",
     "iopub.status.busy": "2024-06-01T15:26:26.713541Z",
     "iopub.status.idle": "2024-06-01T15:26:26.750988Z",
     "shell.execute_reply": "2024-06-01T15:26:26.749552Z"
    },
    "papermill": {
     "duration": 0.052809,
     "end_time": "2024-06-01T15:26:26.754471",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.701662",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make Predictions\n",
    "predictions = hgbr.predict(scaled_test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2c80c269",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.777660Z",
     "iopub.status.busy": "2024-06-01T15:26:26.777135Z",
     "iopub.status.idle": "2024-06-01T15:26:26.797721Z",
     "shell.execute_reply": "2024-06-01T15:26:26.796300Z"
    },
    "papermill": {
     "duration": 0.03594,
     "end_time": "2024-06-01T15:26:26.800984",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.765044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the submission file\n",
    "sub_df = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "48adb467",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.823903Z",
     "iopub.status.busy": "2024-06-01T15:26:26.823376Z",
     "iopub.status.idle": "2024-06-01T15:26:26.831648Z",
     "shell.execute_reply": "2024-06-01T15:26:26.830330Z"
    },
    "papermill": {
     "duration": 0.022882,
     "end_time": "2024-06-01T15:26:26.834242",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.811360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459,)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e140e23c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.857402Z",
     "iopub.status.busy": "2024-06-01T15:26:26.856854Z",
     "iopub.status.idle": "2024-06-01T15:26:26.864836Z",
     "shell.execute_reply": "2024-06-01T15:26:26.863562Z"
    },
    "papermill": {
     "duration": 0.022561,
     "end_time": "2024-06-01T15:26:26.867416",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.844855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 2)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "34fb163a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.891394Z",
     "iopub.status.busy": "2024-06-01T15:26:26.890283Z",
     "iopub.status.idle": "2024-06-01T15:26:26.903214Z",
     "shell.execute_reply": "2024-06-01T15:26:26.901708Z"
    },
    "papermill": {
     "duration": 0.027868,
     "end_time": "2024-06-01T15:26:26.905997",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.878129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>169277.052498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>187758.393989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>183583.683570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>179317.477511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>150730.079977</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  169277.052498\n",
       "1  1462  187758.393989\n",
       "2  1463  183583.683570\n",
       "3  1464  179317.477511\n",
       "4  1465  150730.079977"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d5a47c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.930163Z",
     "iopub.status.busy": "2024-06-01T15:26:26.929627Z",
     "iopub.status.idle": "2024-06-01T15:26:26.942874Z",
     "shell.execute_reply": "2024-06-01T15:26:26.941556Z"
    },
    "papermill": {
     "duration": 0.028732,
     "end_time": "2024-06-01T15:26:26.945607",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.916875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>126926.977707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>151441.596570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>188868.918446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>183447.471894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>193643.259784</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  126926.977707\n",
       "1  1462  151441.596570\n",
       "2  1463  188868.918446\n",
       "3  1464  183447.471894\n",
       "4  1465  193643.259784"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_df['SalePrice'] = predictions\n",
    "sub_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "84bd8a39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-01T15:26:26.969961Z",
     "iopub.status.busy": "2024-06-01T15:26:26.969451Z",
     "iopub.status.idle": "2024-06-01T15:26:26.985226Z",
     "shell.execute_reply": "2024-06-01T15:26:26.983556Z"
    },
    "papermill": {
     "duration": 0.031797,
     "end_time": "2024-06-01T15:26:26.988561",
     "exception": false,
     "start_time": "2024-06-01T15:26:26.956764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the csv file\n",
    "sub_df.to_csv('/kaggle/working/subission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5e0235c",
   "metadata": {
    "papermill": {
     "duration": 0.01089,
     "end_time": "2024-06-01T15:26:27.012621",
     "exception": false,
     "start_time": "2024-06-01T15:26:27.001731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 868283,
     "sourceId": 5407,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30715,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.161176,
   "end_time": "2024-06-01T15:26:27.950777",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-01T15:26:16.789601",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
